// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace ReactiveSearch.UnitTests.Services.Delay.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class DelayServiceMock : global::PCLMock.MockBase<global::ReactiveSearch.Services.Delay.IDelayService>, global::ReactiveSearch.Services.Delay.IDelayService
    {
        public DelayServiceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.IObservable<global::System.Reactive.Unit> Delay(global::System.TimeSpan duration)
        {
            return this.Apply(x => x.Delay(duration));
        }
    }
}
namespace ReactiveSearch.UnitTests.Services.State.Mocks
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class StateServiceMock : global::PCLMock.MockBase<global::ReactiveSearch.Services.State.IStateService>, global::ReactiveSearch.Services.State.IStateService
    {
        public StateServiceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        partial void ConfigureLooseBehavior();
        public global::System.IObservable<T> Get<T>(System.String key)
        {
            return this.Apply(x => x.Get<T>(key));
        }

        public global::System.IObservable<global::System.Reactive.Unit> Invalidate(System.String key)
        {
            return this.Apply(x => x.Invalidate(key));
        }

        public global::System.IDisposable RegisterSaveCallback(global::ReactiveSearch.Services.State.SaveCallback saveCallback)
        {
            return this.Apply(x => x.RegisterSaveCallback(saveCallback));
        }

        public global::System.IObservable<global::System.Reactive.Unit> Remove<T>(System.String key)
        {
            return this.Apply(x => x.Remove<T>(key));
        }

        public global::System.IObservable<global::System.Reactive.Unit> Save()
        {
            return this.Apply(x => x.Save());
        }

        public global::System.IObservable<global::System.Reactive.Unit> Set<T>(System.String key, T value)
        {
            return this.Apply(x => x.Set<T>(key, value));
        }

        public global::System.IObservable<global::System.Reactive.Unit> Set<T>(System.String key, T value, global::System.TimeSpan expiration)
        {
            return this.Apply(x => x.Set<T>(key, value, expiration));
        }
    }
}
